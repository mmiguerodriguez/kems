
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 24 18:28:27 ART 2024
//----------------------------------------------------

package ipl;

import logic.formulas.*;
import logic.signedFormulas.*;
import logicalSystems.classicalLogic.*;
import logic.problem.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Jul 24 18:28:27 ART 2024
  */
public class iplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public iplParser() {super();}

  /** Constructor which sets the default scanner. */
  public iplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\004\003\000\002\002\004\000\002\010" +
    "\004\000\002\010\003\000\002\007\005\000\002\003\003" +
    "\000\002\003\002\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\003\000\002\011\004\000\002\011\003\000\002\006" +
    "\005\000\002\006\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\004\022\006\001\002\000\006\002\ufffe\022" +
    "\006\001\002\000\004\002\055\001\002\000\032\004\023" +
    "\005\010\006\025\007\011\010\026\011\022\012\024\015" +
    "\015\016\021\017\012\020\020\021\016\001\002\000\004" +
    "\002\001\001\002\000\004\012\uffeb\001\002\000\004\012" +
    "\uffe9\001\002\000\006\012\052\021\051\001\002\000\042" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\001\002\000\004\012\043\001" +
    "\002\000\042\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\001\002\000\042" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\001\002\000\010\002\ufffb\014" +
    "\042\022\ufffb\001\002\000\006\012\036\021\035\001\002" +
    "\000\042\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\001\002\000\004\012" +
    "\uffe8\001\002\000\006\012\032\021\031\001\002\000\032" +
    "\004\023\005\010\006\025\007\011\010\026\011\022\012" +
    "\024\015\015\016\021\017\012\020\020\021\016\001\002" +
    "\000\004\012\uffea\001\002\000\004\012\uffe7\001\002\000" +
    "\004\013\030\001\002\000\042\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\001\002\000\042\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\001\002\000" +
    "\032\004\023\005\010\006\025\007\011\010\026\011\022" +
    "\012\024\015\015\016\021\017\012\020\020\021\016\001" +
    "\002\000\004\013\034\001\002\000\042\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\001\002\000\042\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\001" +
    "\002\000\032\004\023\005\010\006\025\007\011\010\026" +
    "\011\022\012\024\015\015\016\021\017\012\020\020\021" +
    "\016\001\002\000\004\013\040\001\002\000\042\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\001\002\000\006\002\ufffd\022\ufffd\001" +
    "\002\000\006\002\ufffc\022\ufffc\001\002\000\034\004\023" +
    "\005\010\006\025\007\011\010\026\011\022\012\024\013" +
    "\045\015\015\016\021\017\012\020\020\021\016\001\002" +
    "\000\034\004\023\005\010\006\025\007\011\010\026\011" +
    "\022\012\024\013\ufff3\015\015\016\021\017\012\020\020" +
    "\021\016\001\002\000\042\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\001" +
    "\002\000\004\013\047\001\002\000\042\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\001\002\000\004\013\ufff4\001\002\000\042\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\001\002\000\032\004\023\005\010" +
    "\006\025\007\011\010\026\011\022\012\024\015\015\016" +
    "\021\017\012\020\020\021\016\001\002\000\004\013\054" +
    "\001\002\000\042\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\001\002\000" +
    "\004\002\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\004\004\007\003\010\006\001\001\000" +
    "\006\007\003\010\055\001\001\000\002\001\001\000\010" +
    "\005\016\006\012\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\026\006\012\012\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\032\006\012\012\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\036\006\012\012\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\043\006\012\011\045\012\013\001\001\000\012\005\043" +
    "\006\012\011\047\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\052\006\012\012\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$iplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$iplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$iplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$iplParser$actions {



	String operator;

	FormulaFactory ff = new FormulaFactory();
	SignedFormulaFactory sff = new SignedFormulaFactory();
	SignedFormulaList sfl = new SignedFormulaList();

	public Formula createNary (FormulaFactory ff, String operator, List l){

   		Connective connective;
   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else 
		if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else 
		if (operator.equals("Xor")){
   			connective = ClassicalConnectives.XOR;
   		}
   		else {
				return null;
   		}

//   		return ff.createCompositeFormula (connective, l);
		FormulaList fl = new FormulaList();
		for (int i=0; i<l.size(); i++){
			fl.add((Formula) l.get(i));
		}

		Formula result = fl.get(0);
		for (int i=1; i<fl.size();i++){
			result = ff.createCompositeFormula(connective, result, fl.get(i));
		}

		return result;

    }

	public Formula createBinary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else if (operator.equals("Xor")){
   			connective = ClassicalConnectives.XOR;
   		}
   		else if (operator.equals("Implies")){
   			connective = ClassicalConnectives.IMPLIES;
   		}
   		else if (operator.equals("Biimplies")){
   			connective = ClassicalConnectives.BIIMPLIES;
   		}
   		else{
     			// Error
   			connective = ClassicalConnectives.IMPLIES;
 			System.exit(1);
   		}

		Formula result = ff.createCompositeFormula (connective,
   								(Formula) (l.get(0)), (Formula) (l.get(1)) );

		return result;
    }


	public SignedFormula createSignedFormula (SignedFormulaFactory sff,String sign, Formula f) {
    	FormulaSign fs;

    	if (sign.equals("T")){
    		fs = ClassicalSigns.TRUE;
    	} else if (sign.equals("F")){
    		fs = ClassicalSigns.FALSE;
    	} else { 	// Error
            fs = ClassicalSigns.FALSE;
            System.exit(1);
    	}

		return sff.createSignedFormula (fs, f);
    }


  private final iplParser parser;

  /** Constructor */
  CUP$iplParser$actions(iplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$iplParser$do_action(
    int                        CUP$iplParser$act_num,
    java_cup.runtime.lr_parser CUP$iplParser$parser,
    java.util.Stack            CUP$iplParser$stack,
    int                        CUP$iplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$iplParser$result;

      /* select the action based on the action number */
      switch (CUP$iplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // oper ::= BIIMPLIES 
            {
              String RESULT = null;
		
                 	RESULT = "Biimplies";
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // oper ::= IMPLIES 
            {
              String RESULT = null;
		
                 	RESULT = "Implies";
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // oper ::= XOR 
            {
              String RESULT = null;
		
                 	RESULT = "Xor";
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // oper ::= OR 
            {
              String RESULT = null;
		
                 	RESULT = "Or";
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // oper ::= AND 
            {
              String RESULT = null;
		
                 	RESULT = "And";
                  
              CUP$iplParser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term ::= BOTTOM 
            {
              Formula RESULT = null;
		
		       RESULT = ff.createCompositeFormula(ClassicalConnectives.BOTTOM);
		 
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= TOP 
            {
              Formula RESULT = null;
		
		       RESULT = ff.createCompositeFormula(ClassicalConnectives.TOP);
		 
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= INCONSISTENCY STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
        		       RESULT = ff.createCompositeFormula(ClassicalConnectives.BOTTOM);
                  
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= CONSISTENCY STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
		               RESULT = ff.createCompositeFormula(ClassicalConnectives.TOP);
                  
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= NEG STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT,
                 						  ff.createAtomicFormula(n) );
                  
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
                 	RESULT = ff.createAtomicFormula(n);
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
                 	RESULT = f;
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listOfFormulas ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		RESULT = auxFormulas;
                 	
              CUP$iplParser$result = new java_cup.runtime.Symbol(7/*listOfFormulas*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listOfFormulas ::= formula listOfFormulas 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		auxFormulas.addAll(l);
                 		RESULT = auxFormulas;
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(7/*listOfFormulas*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formula ::= term 
            {
              Formula RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		Formula t = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
                 	RESULT = t;
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formula ::= INCONSISTENCY LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.BOTTOM);
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= CONSISTENCY LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.TOP);
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formula ::= NEG LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT, f );
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formula ::= oper LPAREN RPAREN 
            {
              Formula RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).value;
		
                 	if (o == "And"){
                 		RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.TOP);
                 	} // this one is for Or - no other option for other connectives
                 	else {
                 		RESULT = ff.createCompositeFormula (ClassicalConnectives.BOTTOM);
                 	}
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula ::= oper LPAREN listOfFormulas RPAREN 
            {
              Formula RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
            		operator = o;

	   				if (l.size() >2)
	   					{
	    						RESULT = createNary (ff, operator, l);
	   					}
	   				else if (l.size()==2)
	   					{
	   						RESULT = createBinary (ff, operator, l);
	   					}
	   				else {
	   						RESULT = (Formula) (l.get(0));
	   					 }
	             
              CUP$iplParser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // end ::= 
            {
              Object RESULT = null;

              CUP$iplParser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // end ::= EOL 
            {
              Object RESULT = null;

              CUP$iplParser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // signed_formula ::= SIGN formula end 
            {
              SignedFormula RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		
                 	RESULT = createSignedFormula (sff, s, f);
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(5/*signed_formula*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula_list ::= signed_formula 
            {
              SignedFormulaList RESULT = null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		SignedFormula sf = (SignedFormula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
               		SignedFormulaList auxFormulas = new SignedFormulaList();
               		auxFormulas.add(sf);
               		RESULT = auxFormulas;
                 
              CUP$iplParser$result = new java_cup.runtime.Symbol(6/*formula_list*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula_list ::= signed_formula formula_list 
            {
              SignedFormulaList RESULT = null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		SignedFormula sf = (SignedFormula)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		int sflleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int sflright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		SignedFormulaList sfl = (SignedFormulaList)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
               		SignedFormulaList auxFormulas = new SignedFormulaList();
               		auxFormulas.add(sf);
               		auxFormulas.addAll(sfl);
               		RESULT = auxFormulas;
   				
              CUP$iplParser$result = new java_cup.runtime.Symbol(6/*formula_list*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).right;
		Problem start_val = (Problem)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).value;
		RESULT = start_val;
              CUP$iplParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$iplParser$parser.done_parsing();
          return CUP$iplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= formula_list 
            {
              Problem RESULT = null;
		int sflleft = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left;
		int sflright = ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right;
		SignedFormulaList sfl = (SignedFormulaList)((java_cup.runtime.Symbol) CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).value;
		
   			Problem ps = new Problem("SATLIB SAT Format");

   			ps.setFormulaFactory(ff);
   			ps.setSignedFormulaFactory(sff);
   			ps.setSignedFormulaList (sfl);

   			RESULT = ps;
   		
              CUP$iplParser$result = new java_cup.runtime.Symbol(2/*file*/, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$iplParser$stack.elementAt(CUP$iplParser$top-0)).right, RESULT);
            }
          return CUP$iplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

